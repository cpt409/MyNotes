HTML = standard language for creating webpages.

hypertext = text that contains a link to another resource.  content linked to related content.
mark up:  portrayed by using tags or elements, which describe how the content between the tags should be displayed.  they "mark up" text.

<a>text</a> anchor tag

tags = surrounded by angle brackets.

element = a set of tags and the enclosed content.

<tag></tag>
<selfclosingtag />

attribute = metadata inside tag defined by key/value pair.

<img src="logo.png"/>

////////////
Link	relatioinship between current document and external resource
		typically used for stylesheets
<link rel="stylesheet" href="./CSS/stylesheet.css">
rel = relationship	stylesheet
					alternate, author, help, icon, license, search, preload, prerender, more...
href = location of linked document.  URL or path.

////////////////////

<a></a>	defines a hyperlink = link one page to another
Anchor
target	determines where to open link:	_blank, _self, _parent, _top
href	URL, path, #



Elements:
<!DOCTYPE html> (let browser know that this is an HTML document)
<html>  (Parent of all other elements.  Start of html document.)
	<head>
		<title>Title</title> (title of webpage)
	</head>
	
	<body> (Sibling of Head / Second child of <html>)
		<p>A Paragraph</p>
	</body>
</html>


Syntax rules:  	tags are not case sensitive
				however, always used lowercase
				attributes values are case sensitive
				single white space character
				browsers ignore unknown tags
				

General Content Elements:
<p>			paragraph
<br />		line break
<!-- -->	comment tag
<div>		block element; entire width; group interior content
<span>		inline element; width of interior content
			other content will be side by side with it
			if it overflows, then content will fall to next line.
			only as wide as its contents

Semantic Elements:
do not visually affect webpages
they determine how a browser displays their contents
i.e. mobile might treat divs and sections differently when screen is rotated.
organize related content
<header>	header content at top of page
<nav>		nav bars for navigational information
<section>	reserved section of a page
<article>	article or story content
<aside>		sidebar content
<footer>	footer content


Tables:
<table>		table element
<th>		table header have special styling
<tr>		table row
<td>		table data cell

sections: just used for organization
<thead>
<tbody>
<tfoot>

cell elements:
used with TD or TH element
rowspan		how man rows a cell will occupy (vertically)
colspan		how many columns a cell will occupy (horizontally)

Captions:
<caption>	give title or description
			use directly beneath table element tag
			


Lists:
Ordered and Unordered
<ol>	uses numbers or letters
<ul>	uses bullets
<li>	an item in any kind of list

use Type attribute to change characters/bullets
default is Arabic numerals.
use A for uppercase letters
use 'a' for lowercase letters
use 'i' for roman numerals (in upper and lower).


Links:
hyperlink
<a> anchor tag

attributes:
href=""		hypertext reference - the resource the link directs to
target=""	target window - 
			determines which context the link opens in
			either in current window frame, or different context
	can have four values:
	_self	load resource in same window as current page (default)
	_blank	load in new window/tab
	_parent	parent of current context
			if in a frame, load in the frame's parent window
			if no parent, the use current window
	_top	find ancestor of all contexts, or very first parent
	
<a href="https:...">Link 1</a>
<a href="https:..." target="_blank">Link 2</a>


Internal Link:
<div id="div1">
<a href="#div1">Link to Div1</a>


Forms:
<form>

attributes:
method		determines wihich HTTP method will be used to send data
			use either GET or POST
			
GET			embed the form data into the URL
			never use for passwords
			for bookmarkable data
POST		put data in the body of the request
			more secure
			for sensitive data
			
action		specifies the URI that will handle the HTTP request
			"handler"
			this is where the front-end meets the back-end
			this is where the form data is sent
			if you don't specify action, then current page will
			handle the form
			
Use Input:
<input>		create a data entry field
<textarea>	resizable text box
<select>	create a drop-down list
<option>	denotes an item selectable in a select list
			value attribute is what actually gets sent to server
			<option value="MD">Value user sees in dropdown MD</option>
			value="MD" is what actually gets sent to server
<fieldset>	grouping form fields
<legend>	adds a caption for the parent fieldset
<label>		each input can have a label
<button>	render button on page

Input types:
type="email"	validates input as an email address
type="number"	only allows numbers as input
type="color"	create a color-picker tool
type="date"		restrics input to mm/dd/yyyy
type="password"	obscure user input
type="range"	replaces input with a slider
type="tel"		format input as phone number
type="url"		validates input as a URL

give every input a name="" attribute


<body>
	<p>Input with Legend/FieldSet and Labels</p>
	<form>
		<fieldset>
			<legend>User Credentials</legend>
				<label>Username: <input type="text"
								name="username"/>
								</label>
				<label>Password: <input type="password"
								name="password"/>
				</label>
		</fieldset>
	</form>
</body>

another way to do input with label using For and Id
<label for="street"/>Street</lable>
<input id="street" name="address1" type="text"/>




Embedding Media:

<img>	embed images
		use src attribute
		alt attribute - alternative text when image not loaded
			can be seen by hovering mouse over image
		<img src="images/sample.png" alt="company logo"/>
		
<audio>

<video>

valueless attributes:
controls	toggles playback controls on/off
autoplay	toggles automatic playback
			do not embed autoplay media, considered rude
loop		automatically replay media once it has loaded

examples:
<audio src="audio/notes.mp3" controls>text</audio>

This way enables to have multiple file types available:
<audio controls>
	<source src="/notes.mp3" type="audio/mp3"/>
	<source src="/notes.ogg" type="audio/ogg"/>
</audio>
	

<video src="pingpong.mp4" controls
		width="300px" height="400px">text</video>
		
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

css:
body { margin: 2em }	all margins set to 2em
body { margin: 1em 2em }	top/bottom = 1em  right/left = 2em
body { margin: 1em 2em 3em }  top = 1, right = 2, bottom = 3, left = 2

collapsing margins: combining margins of two or more boxes
	horizontal margins never collapse
	margins of root element's box do not collapse
	if top and bottom margins of an element with clearance
		are adjoining, its margins collapse with the adjoining
		margins of followng siblings


			
Four link states:
a:link			normal/unvisited
a:visited		user has visited it
a:hovering		mouse hovers over it
a:active		link the moment it is clicked

/* Directional values */
caption-side: top;
caption-side: bottom;

/* Logical values */
caption-side: block-start;
caption-side: block-end;
caption-side: inline-start;
caption-side: inline-end;

/* Global values */
caption-side: inherit;
caption-side: initial;
caption-side: unset;




///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


JavaScript:
Not related to Java
given that name by creators, because at that time
Java was very popular, so they wanted it to be familiar

It is a front-end, scripting, language

<script</script>
type is default JavaScript.

comment
// two forward slashes
/*   */


Datatypes = specialized form of information, typically conforming to a template.
in JavaScript, variables are not assigned a type during declaration.
Types are interpreted as the code runs.
7 total:
string		" ", or ' '
boolean		true/false
number		integer or decimal
undefined	var blank;  // a variable that is not assigned
object		group of key/value pairs (null)
function
symbol

date		date/time
array		collection of data

special:
undefined	value not yet defined
null		an empty value

var b;		// undefined
var b = null;


Variables:
temporary storage unit that stores data
camelCase
must begin with letter, _, or $
case sensitive


Operators:
division by zero	Infinity keyword
increment operator	++, etc.
shorthand combine operators		+=, etc.
Not-a-Number		NaN

when you add a number to a string, you get concatenation
NaN is value to see when doing arithmetic other than
concatenation when operating with strings and numbers.



Conditional Statements
flow of execution of a program
If

==		compares values, not datatype
===		compares two operands considering value and type
"2" == 2	true
"2" === 2	false



Truth Values
Truthy		if it evaluates to true/false
			all values not listed below
			any number other than 0
			non-empty strings
			non-empty object
			true
Falsy		a value that evaluates to false
			false
			null
			undefined
			0
			NaN
			"" (empty string)

<body>
<p>The value is <span id="result"></span>.</p>			
var elem = document.getElementById("result");
var value = NaN;
if (value)
	elem.innerHTML = "true";
else
	elem.innerHTML = "false";
	
	

For loop: the i is still usable outside of the for loop.
While loop:
break			break out of loop immediately
continue		skip to next iteration of loop


Functions:
function() {
	alert(hello!);
}

parameter	variables inside the function signature
argument	value passed to the function

Hoisting	process of assigning loose variables	
			to the global window object
			if you declare a variable without using
			the var/let keyword
			

Objects:
group properties and behaviors that are related to each other
into one container
Representation of an entity that has related functionality
uses Literal notation:

var Person = {
	property:value,
	property:value
};

each key/value pair is referred to as a property and associated value

Creating objects:
constructor notation with new keyword:
var Person = new Object();

dot-notation	access an objects properties value
array-notation	access value similar to array: Person["name"]


Methods:	function that is assigned as a property of an object

var Person = {
	GetName: function {
	
	}
}



Timers:
function that executes after a set period of time

setTimeout()		call function once after specified ms
setInterval()		execute repeatedly waiting ms between executions
clearInterval()		stop execution of code run by setInterval()

function talk() { alert("Hello!"); }
setTimeout(talk, 4000);



DOM
Document Object Model
Programming interface that allows programmers to retrieve and 
manipulate elements of a webpage/document.

tree-like structure/representation of individual elements
and content on a page

serves as an API for handling events and responding to user or browser interactions.

the model is the tree-like structure
each element is a node

document is root
html is child
head	body  siblings (have same parent node)



Accessing the DOM (5):
Document.getElementById()	
getElementsByTagName()				"LI"
getElementsByClassName()			"className"
getElementsByName()					name attribute

document.querySelector("li");		
document.querySelectorAll("ol");	




Elements that display text		element.innerHTML
set attributes					element.setAttribute("name", value);
style property					element.style.property = value;

<body>
	<p id="myID">This is a paragraph</p>
	<script>
		var para = document.getElementById("myID");
		console.log(para);
		
		para.innerHTML = "New text";
		para.style.color = "red";
	</script>


Adding/Deleting Elements:
document.createElement()	use tag name
appendChild()
removeChild()



Event Handlers:
Events		interesting actions that occur
Listeners	added to HTML elements

addEventListener()		register a handler
						button.addEventListener("click", function(){...});

						2 arguments:
						string name of the event
						function that we want to execute

	another way:
	btn.addEventListener("click", clickResponse);

	function clickResponse() {}


Event Names:
click
change			when an option is selected from a dropdown
mouseover
keydown
load			when a key is pressed
focus
blur			when an element loses focus
submit			


Callback function		a parameter that is a function that is
						executed when an event occurs
						
for IE versions older than 11:  use .attachEvent();


Prevent default actions:
preventDefault()			stop the execution of default actions
							associated with the event.
							
			link.addEventListener("click", function(event) {
				event.preventDefault();
				... more code });
				
			when you need to run calculations, etc., before it
			sent to server.
			


Event Propagation:
when an event first occurs, such as a click, the event is
emitted frm the topmost object in the DOM (the window).  

Then it moves down the tree structure until it reaches the
origination or target of the event.

This is called capturing:

capturing			the phase of event propogation through the
					DOM from the root node to the target.

after capturing:
					
Bubbling			phase of event propogation outward from	
					the target up the DOM to the root node.
					"bubble up to the window".
					
By default, event listeners are triggered in the bubbling phase.


To set the phase programattically, you would add a third parameter
to the addEventListener method specifying a boolean value:
		true	the listener is set to trigger under capturing
		false	it will trigger under bubbling
		
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////


CSS

block style statement language
selector 	i.e., p div or whatever
			{} surround all statements related to that selector
declaration		property: value inside the curly braces


Types of selectors:
element						p { }		
class						.blue { }	(class="blue")
id							#green { }	(id="green")
* (all)						* {}
multiple, elements			h1, p {}
parent > child				div > p {}
							immediate children of specific element
							all immediate paragraphs that are children
							of div elements
ancestor descendant			div p {}
							more general descendants
							will apply to all paragraphs in a div
							even if they are grandchildren
sibling+sibling2			h2 + p {}
							any paragraphs, or all paragraphs
							that immediately follow <h2>
							elements that are both immediate
							children of same parent. i.e., a
							second para that is also sibling would not
							get styled.
predecessor-successor		div ~ p
							successor comes after another in tree
							all paragraphs that are sucessors of
							div elements
							

Colors:
Hexadecimal			RGBA (base10)	(A = alpha = 0 - 1 (transparency))
000000	black		
FFFFFF	white		
FF0000	red			color:rgb(255,0,0, 0.5);	
00FF00	green		
0000FF	blue		
FFFF00	yellow		
FF00FF	magenta			
00FFFF	aqua		
(ex: p { color: #FF0000; } );

HSL (hue, saturation, lightness)
p { color:hsl(360, 100%, 100%) };
p { color:hsla(360, 100%, 100%, 0.5) };

first value = 0 - 360
second and third value are 1-100%
can also add fourth value for alpha of 0 -1

background-color		
background-size			
background-position		
background-image		
background-repeat		


Font properties:
color			
weight			
font-family		serif vs sans-serif
font-size		height/width

serif = feet on text

Font-Variant	display font in small caps
				normal(default)
				small-caps = uppercase, but reduced size
				
Font-Style		normal
				oblique
				italic
				
Font-weight		boldness of chars
				range = 100-900
				100 is lightest
				900 is boldest
				values: lighter, bold, bolder
				400 is default = normal
				700 = bold

Import custom fonts:
<link href="https:/...." rel='stylesheet' type='text/css'>
<style>
	* {
		font-family: 'Raleway', 'Century Gothic', sans-serif;
	}
</style>



Text Properties:
Text-align		center, left, right, justify, justify-all
				justify-all forces the last line to be justified
				
Text-decoration		underline, overline, line-through
					or none
					some elements have default set

Text-transform		capitalization of text				
					uppercase, lowercase, capitalize, none

line-height			space between lines
					numerical, length (mm, px, pt, em), or %
					normal is default
					
Text-indent			spacing before first line of text of an element.
					numerical, length, or %
					default is 0

Vertical-align		many options

Directional			reading direction
					ltr, rtl
					
Letter-Spacing		control spacing between letters
					any length value
					
Word-Spacing		normal, length, %

Text-Shadow			color x-offset y-offset blur-radius
					or
					x-offset y-offset blur-radius color
				
					p { text-shadow: 1px 1px 1px blue; }


Tables, List, Links:
border
border-collapse		separate is default
caption-side		left and right may not work in some browsers
border-spacing		only works if border-collapse is set to separate
					specifieds horizontal/vertical
					enlarge area between cell's content and outer border
empty-cells			show, hide
table-layout		

List:
list-style-type			upper-alpha, decimal, lower-alpha, etc
list-style-image
list-style-position		outside (default), inside
						numbers will be outside the border
						
Link:
Anchor States:
link (default)		
visited				when link has been clicked before
hover				when mouse is position over link
active				when user actively clicking the link


Units of Measure:
value				percent, pixels, points, etc
					margin allows negative values
					cannot have negative padding
absolute units		based on length
					cm, in, px (1/96th of an inch), pts, picas
					
relative units		based on dimensions of another element
	em				relative to font-size property of current element
	rem				relative to the root element of page
	ch				relative to width of the zero character
	%				based on its parent element or
					browser's window depending on the property
					
Length-based properties:
width				based on browser's window
height				if expressed in %
					calculated based on its parent element
					<body> and <html> may need to
					have a height of 100%
margin
padding
font-size
border-width
background-size


CSS Box Model
way for the drawing engine to layout and display elements;
composed of four containers:
	margin		spacing between other elements
	border		color and outline of an element
	padding		space between border and containing content
	content
	

Margin 
(length-based)
auto			tell browser to calculate the margins
%
length (px, em, mm, etc.)
<body> has default margin set to 1em



Border
Place outline around element
border-width
border-style
border-color
border-radius

border-radius values: (length value range 1 - 4)
15px, 50px, 30px, 5px
topleft, topright, bottomright, bottomleft

15px 50px 30px
topleft, topright and bottomleft, bottomright

15px 50px
topleft and bottomright, topright and bottomleft

15px
applies to all four corners



Padding 
(inner most container that manages space between content
			and the border)
%				
length-based	

Box-Sizing property
content will spill outside the container
if you set the width of an elem to 100%, and a padding to some
positive value for the left and/or right sides.
the browser will calculate the width of the element first,
and then it adds the padding, causing it to spill.

change the box-sizing property from its default value: content-box
to border-box, then padding will be included in the calculations

box-sizing property:
content-box		default. width/height includees only content.
				border/padding are not included.
border-box		include padding and border in the element's
					total width/height


Position Elements:

choose position property:
absolute				relative to its parent
						or to document body if parent is static
						if you want child to be relative to parent
						then you have to set the position of the parent.
						
fixed					relative to browsing window
						scrolls with the window
						
relative				relative to its normal flow
						leave blank spaces where they would normally be
						
static (default)		elements render in order, as they appear in the
						document flow

choose side:
top, right, bottom, left

z-index property
higher values on top
0 and negative are valid values

float property:
set an element along the left/right side of its container
allow text to wrap around it
left		left hand side
right		rigth hand side
none

clear property		specify side to disallow elements to float to
left
right
both

overflow property
hidden		hide the content
scroll		use scrollbars
visible		render the overflow content
auto		tell browser to fit the content inside a parent that has
			a float property assigned to it


let, var, const

var		function level scope
		if defined in middle of function, then it is hoisted to top
		only the declaration is hoisted, not the assignment;
		

let 	cannot be redeclared in the same scope
		can be defined in block scope

const 	cannot be re-assigned




asynchronous javascript and xml
used to create asynchronous web applications
asych = communicate with server, exchange data, update page, without having to refresh
four states:
0	unsent
1	opened
2	headers_received
3	loading
4	done





Primitive DataTypes:
number
string
boolean

null
undefined
symbol

///////////////////////////////////////////////////////////////////////////////////////////////////////

FetchAPI
interface for fetching resources (more powerful than XMLHttpRequest
asynchronous
promise chaining: run multiple actions on the returns of sequential asych functions

fetch('https://reqres.in/api/users/23', { 
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        name: 'User1'
    })
})
    .then(res => {
        return res.json()
    })
    .then(data => console.log(data))
    .catch(error => console.log('Error'))


you have to set header type (content-type: application/json)
you have to stringify the body data (convert it from javascript object to a json string)


Promises:
asynchronous
the result of the Fetch HTTP request
two responses:  resolved, rejected
.then(a, b)
	-> a = the resolved request
.catch()
	-> b = the rejected function is implemented
.final()
	-> always runs

great for when you need to do something in the background that might take a long time
rest of the app can run, while the promise is being worked on


///////////////////////////////////////////////////////////////////////////////////////////////////


AJAX (asynchronous javascript and xml)
create asynchronous web applications using web technologies on the client-side
uses XMLHttpRequest to communicate with server
asynchronous = comm with server, exchange data, update a page without having to refresh
four states:
0	UNSENT				open() not called yet
1	OPENED				open() has been called
2	HEADERS_RECEIVED	send() has been called (headers and status available)
3	LOADING				downloading
4	DONE				operation is complete


a set of inter-related technologies:
javascript, xml, html/css, DOM, XMLHttpRequest

XMLHttpRequest = sends data in the background to the server
				requests/receives/updates data from the server

<!DOCTYPE html>
<html>
<body>

<div id="demo">
<h1>The XMLHttpRequest Object</h1>
<button type="button" onclick="loadDoc()">Change Content</button>
</div>

<script>
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }
  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}
</script>

</body>
</html>

JSON
javascript object notation
used to exchange data between a browser and server


////////////////////////////////////////////////////////////////////////////////////////////////////


REST
Representation State Transfer
Representation = format used (JSON) to exchange information
use a stateless request model
architectural style
Performs CRUD in a standard way
treat all server URLs as access points for varioius resources on the server
https://example.com/users
users = the resource that the server is exposing

https://example.com/users/1
act on the resource id of a single user

four basic HTTP actions: (get, post, put, delete)
uses these to perform whatever actions on the resource
https://example.com/users (get) get a list of all users
							when an id is not in the url, it acts on the entire resource
							get corresponds to reading data
https://example.com/users (post) create a new user
							used on entire resource, not on single Id
							corresponds to creating a resource
https://example.com/users/1 (get) get a single user based on Id that is in the URLs
							acts on a single ID
https://example.com/users/1 (put) update the resource with the given ID
							acts on a single ID
							corresponds to updating a single resource
https://example.com/users/1 (delete) delete
							delete resource with given id

urls do not need to be in the format above
they just need to correspond to a resource

SOAP
Simple object access protocol
provides access to web resources
architectural style vs protocol
protocol of specific structure - its requests have a unified look and organization
.xml for message format
relies on layer protocols (http)
soap message components:
Envelope (header)
Body (WSDL text of message itself)
sender information and request details (http protocol)
soap has a type system
bandwidth = heavier requests
		require more work on both ends (sealing, opening)
		uses an envelope
data logic: shows the logic for each protocol in transfers
use when information needs to be controlled and described in details
more stability
standardization, security, extensibility
financial operaitons

REST
an approach to architecture: client-side and server-side are isolated
defined with an interface description language (choose xml, html, json, etc)
bandwidth = lighter
	a postcard is faster/cheaper
	takes extra steps to access a postcard
data logic: names resources to be accessed during transfer
use when messages and minimal or low-bandwidth situations, and specify less information
high performance, scalability, flexibilty, browser freindliness
use when performing multiple operations vs one big one


DNS:
directory of names and IP addr
Domain Name
google.com	->	ip address 


Backend:
get a URL
protocol (http or https (encrypted))
host (domain name) = IP = server already knows this
path = tells server what the client wants
	defines which section of code on the server should be run to get the response
query string = used by the section to handle the response
	string is divided into parameters which can augment the way the server responds
	
url is not enough
it also needs an action
action = GET, POST, PUT, DELETE

combine path and action = server knows what part of the section to go to, and use the query to alter the response of that part of the section.
	- might be a dynamically generated html page
	- example youtube, each time you search, you get the same page but with different videos bbased on your query



100 - 199	informational
200 - 299	successful responses
200			OK (request succeeded based on whatever action)
201			Created (sent after POST, PUT succeeded)
204			No Content (no content to send for the request, but the headers might be useful
300 - 399	redirects
300			Multiple Choices (request resource has different choices, cannot be resolved into one)
301			Moved Permanently (URL has been changed, and is given in the response).
302			Found (URI has been changed temporarily).  Use same URI for future requests.
304			Not Modified. (client performed GET request.  access is allowed. document unmodified.)
307			Temporary Redirect. (resource resides temporarily under a different URI.)
400 - 499	serve cannot find the requested resource/client errors
400			Bad Request (invalid syntax)
401			Unauthorized (it means unauthenticated).  the client must authenticate itself.
403			Forbidden (client does not have access rights to the content.  it is unauthorized).
						(server is refusing to give the request resource.
						(client's identity is known to the server.)
404			Not Found (server cannot find the requested resource.)
						(URL is not recognized.)
						(API = endpoint is valid, but the resource itself does not exist.)
						(server can send this instead of a 403 to hide the existencce of a resource
							from an unauthorized client.)
405			Method Not Allowed (method/action has been disabled - i.e., DELETE, PUT, etc.)
					(GET and HEAD are mandatory and can never be disabled.)
408			Request Timeout (response is sent on an idle connection).
410			Gone. (resource is no longer available; no forwarding address is known.)
500 - 599	server errors
500			Internal Server Error: Server encountered a situation it doesn't know how to handle
501			Not Implemented: method is not supported by the server
502			Bad Gateway: the server, acting as a gateway, got an invalid response
503			Service Unavailable: server is not ready to handle the request.
							server is down, overloaded.
505			HTTP Version Not Supported: HTTP version used in request is not supported by the server.
511			Network Authentication Required: indicates that the client needs to authenticate to gain access.
550			Permission Denied.  your acct does not have permission to perform the action you are attempting.

Safe operation	does not alter the state of the server
				GET, HEAD, OPTIONS are safe
				
Idempotent	identical request can be made in a row with same effect while leaving server in same state
			should not have any side-effects
			only back-end of server is considered
			client calls same method several times in a row, and get the same result
			GET, HEAD, PUT, DELETE, OPTIONS, TRACE
			Not POST (ie., add row is called several times, and each time the result is different because its a new row
			

All Safe methods are idempotent, but not idempotent methods are safe
			PUT and DELETE are idempotent, but not safe
			
Idempotent methods:		GET, HEAD, PUT, DELETE, OPTIONS, TRACE
Non-Idempotent:			POST, PATCH, CONNECT
			



HTTP Lifecycle:
Session consistes of three phases:
1) client establishes a connection (UDP/TCP) with HTTP/HTTPS (80/443)
2) client sends its REQUEST and waits for the RESPONSE
	request composed of three parts separated by CRLF (carriage return, line feed):
		Line 1: request Method (get, put, post, etc.), absolute URL document path, protocol version:
			GET /doc/test.html HTTP/1.1
		HTTP Header gives the server:
			info about what data is appropriate
			other info about how to treat the request/behaviors
		-- then an empty line
		Request Body:
			(optional) data block, mainly used by POST that contains more data
3) server processes the request, sending back its answer with a STATUS CODE and data
	Response is composed three blocks separated by CRLF
			LIne 1: Status. ack of HTTP version used, and a request status code w/meaning
				HTTP/1.1 200 OK
			Specific HTTP headers, giving client info like data type/size/coompression/caching
			-- then an empty line
			Body:
				data block that contains the data (webpage...)

Request Methods:
	HTTP Verbs
		GET		request/retrieve data (all data, or just a record)
		POST	sends data to server, mainly used for forms
		PUT		replace data of that record with new data
		DELETE	delete the resource
		HEAD	identical to GET, but without response body
		OPTIONS	communication options for the target resource
		TRACE	message loop-back test
		PATCH	partial modifications to a resource
		CONNECT	establish tunnel to server identified by target resource




///////////////////////////////////////////////////////////////////////////////////////////

API: set of functions and procedures allowing the create of applications that access the features or data of an operating system, application, or other service.

interactions between multiple software applications or mixed hardware-software intermediaries.


difference between middleware and api:
API:	api connect your website directly to third-party tool, application,
		single, direct line of communication between your app and tool you're integrating without
		easy to configure, can be integrated quickly
		downside: it can only consume data in one-to-one connection

Middlware: 
		connector between your website and other tools
		processes data through multiple sources
		data processed from your webiste into middleware then distributed to ERP, accting software, email tool
		good for managing high-volume of orders
		automating data processing
		downside: middleware is more unique
				configure it requires expertise
				requires daily administration by developer(s)
				more time to build and maintain
				sensitive data will mean it is another vulnerability
				


///////////////////////////////////////////////////////////////////////////////////////////

2)

SDLC
Dividing software development work into distinct, repeatable phases to improve design and product management

Phases:
Planning/Requirements phase		Stakeholders give input and decide on feasibility of project
								Different approaches to solving various problems are explored
Define project requirements		Stakeholders define and document the product to get them approved by the customer
								Final design approach is decided upon
Design product architecture		Decide on best approach to implement the design plan
Building the product			specific language is chosen and code is written following guidelines
Testing							testing/refactoring the product is conducted mostly after product is complete.
Deployment and maintenance		user acceptance testing.
								formal release with continued evaluation.
								code refactoring based on user feedback.
								
Waterfall Model:	breaks down project into phases
					each phase depends on deliverables of previous phase
					progress flows down each phase only when preceding phase is verified to be complete.
					less iterative, less flexible
					high accountabiity and documentation
					too regid for most situations

Spiral Model:		base process on unique risk patterns of project.
					adopts elements of other models.
					a single loop of spiral is an iterative waterfall.
					exact number of loops depends on requirements of the project.
					each loop is called a phase
					each phase is divided into quadrants
						1 - objective definition
						2 - identify risks
						3 - develop next version of product
						4 - review/plan for next phase
						
Iterative Model:	develop project through small iterative develoment cycles
					learn from earlier versions of the project
					each iteration adds features until full app is implemented
					analysis of each iteratation is based on client/user feedback
					unlike waterfall, iterative allows backtracking
					
V Model:			process steps flow downward during development
					then back upward during testing phase
					relationship between each phase occurs horizontally among the pairs
					horizontal axis represents time (gets longer as start and end).
					vertical down axis = project definition
					vertical up axis = project test and integration
					
					Down						Up
					concept of ops				ops and maintenance
					requirements/architectural	system verification/validation
					detailed design				integration, test, verification/validation
					
Big Bang Model:		does not follow any specific process
					requirements implemented without much analysis
					development starts as soon as the required funds are acquired, and developers are ready
					high risk
					for small projects, offers easy management, rapid prototyping, flexibility, few resources
					
Agile - CMMI		Capability Maturity Model Integration					
					process level improvement appraisal program
					"quality of a system or product is highly influenced by the process used to develop and maintain it".
					guides process improvement across a project, division, or entire organization
					
					Level 1:	Initial.  Processes unpredicttable, poorly controlled
						2:		Managed.	processes characterized for project are reactive.
						3:		Defined.	processes are proactive.
											projects tailor processes from organizational standards.
						4:		Quantitatively Managaged:
											processes are measured and controlled.
						5:		Optimizing.	focus on proces improvement.
						
Agile:				interactions are prioritized over processes
					working software is more important than extensive documentation
					collaboration with client is prioritized above negotation
					quick response to new requirements
					priorities:
						early, continuous delivery (CI/CD)
						quick acceptance
						quick delivery
						regularly scheduled sessions of introspection
						constant adjustment
					series of sprints
						each team has as a specific user story
						2-4 weeks
						after sprint, each team demonstrate what they have accomplished
			
			Scrum:	iterative
					teams hypothesize about how the final project should work
					try to implement the idea
					reflect on experience
					make adjustments
					repeat the cycle
					best used when amount of work can be split in to more than one sprint
					
			Sprint:	period of time which teams work to complete a user story
					all user stories form the backlog (record of all user stories)
					each user story is assigned points representing the expected effort needed
					after the sprint, you add up the points completed
						this repesents VELOCITY = enables you to estimate how many sprints will be needed
										can also be used to guage how much you can do in each sprint
					
			Kanban:	japanese word for visual signaling for work-in-progress
					FLOW = reflects that work flows continuously through the system instead of being constrained to distinct timeboxes
					
					
///////////////////////////////////////////////////////////////////////////////////////////

3)
Docker:
mix between software development platform and virtualization technology
containerized
apps run the same, independent of the system they are run on
run in their own micro-computer (own resources, processes, etc.)
how is docker different than virtual machine

VM:
	simulates a real computer within an existing OS
	software is isolated from underlying hardware resources
	
Virtualization Software:
				docker and kubernetes
				run application in an isolation environment called a container
					on single computer, without a hypervisor

containerization:	bundling an app together with all config files, libraries, dependencies
					system agnostic

Docker:			allows devs to continue working in standardized environment while using containers

docker image:	standalone executable package that includes everything need to run an app

docker container:
				created from the docker image
				becomes the unit for distributing and testing your app
				deploy app as a container
				
docker engine:
				client-server app with three components:
					server:	long-running program called a daemon
					
					REST API: how you interface with daemon
								the dockerd command
								
								daemon: creates and manages docker objects
											images, containers, networks, volumes
					
					CLI Client: how you interact with docker through CLI
								the docker command

Client-Server architecture:
		docker client talks to the docker daemon (Server) which builds, runs, distributes docker containers
		client and daemon can run on same system


									
Docker compose:	tool for defining and running multi-container Docker applications
				uses YAML file to configure app services
				with single command, you create and start all the services from your config.
				used extensively in CI/CD
				used to automate testing configurations and dependencies so that workflows are automated and end-to-end testing is faster and easier

Dockerfile		used by docker build command to create a container image
				build an application inside and outside of Docker
				dockerfile -> docker image -> docker container
				
					
///////////////////////////////////////////////////////////////////////////////////////////

4)
DevOps Fundamentals:					
		replace silo'd Development and Operations teams

OODA Loop:	Observe business and market needs
			Orient with options for what you can deliver
			Decide goals to pursue
			Act by delivering working software to real users
			
Continuous Integration:
			automating merging and testing of code.
			process of automating build and testing of code every time there is a commit changes to version control.
			automating merging and testing of code
			helps catch bugs early.

Continuous Delivery:
			process of building, testing, configuring, and deploying code to a production environment
			helps improve product quality
			achieves the shortest path from new code to final deployment
			code changes are automatically prepared for a release to production
			every code change is built, tested, then pushed
			manual approval to update to production
			
Continuous Deployment:
			production happens automatically without explicit approval
			automates the entire software release process
			every revision that is committed triggers an automated flow that builds, tests, then stages the update.
			the final decision to deploy is triggered by the developer.
			
Continuous Testing:
			use of automated build-deploy-test workflows
			test your changes continuously in a fast, scalable manner
			
				
5) Pipelines:
			starting point is to have source code in a version control system: GIT and TFVC
			
	Azure Pipeline:
	edit code -> edit YAML file -> push to code repo -> azure pipelines -> deploy to target
		constantly tetst and build your code to be shipped to any target
		
	Build Definition: mechanism that controls how and when builds occur.
			.yml file defines a build.
			specifies:
				the things you want to do
	
	Code Analysis:
		SonarCloud.io
			third party analyzes documentation and code from the pipeline, and then analyze it.
			
		Static Code Analysis:
			analysis of computer software performed without executing the program.
			performed on source code.
			usually performed by automated tool (SonarCloud, SonarQube)
			Code Review = human analysis
	
		Coverage:
			determines what percentage of the total lines of code are covered by unit testing.
			it is a mix of line coverage and condition coverage.
			Formula:
				CT = conditions evaluated to true
				CF = false
				LC = lines covered
				B = total number of conditions
				EL = total number of executable lines
				
				Coverage = (CT + CF + LC) / (2*B + EL)
				
		Technical Debt:
			estimated time to fix all maintainability issues/code smells
			
		Code Smell:
			characteristic in source code of a program that indicates a deeper problem.
			an issue with long-term maintainability in the code.
			leaving it as-is means that it will be more difficult for maintainers to make changes.
			risk of new errors as they make changes.
			
		Duplication:
			lines of code that are identical and could theoretically be sepaated into a method or be called by using SOLID or DRY principles
			
		Quality Gate:
			best way to "fix the water leak" and enforce policies ensuring high quality code.
			basically clean your code as you go.
			set up a gate to give a go/no-go signal on the current worthiness of code.
			
		Monitoring Security and Vulnerability:
			security-related issues:
				a place in your code that an attacker could exploit
			security hotspots:
				areas of code that may cause security issues and need to be reviewed
				
			Three types:
				reliability (bug)
				vulnerability (security)
				maintainability (code smell)
	
///////////////////////////////////////////////////////////////////////////////////////////
		
6) YAML
	human readable data serialization standard for all programming languages.
	superset of JSON.
	syntactically significant newlines and indentation

	useful for configuration, messaging
	portable between programming languages

%YAML 1.2
- - -
!!map {
  ? !!str "Not indented"
  : !!map {
      ? !!str "By one space"
      : !!str "By four\n  spaces\n",
      ? !!str "Flow style"
      : !!seq [
          !!str "By two",
          !!str "Also by two",
          !!str "Still by two",
        ]
    }
}

	used by Azure Pipelines to configure CI/CD Pipelines
		the file sits at root of project
		controls the build, test, and deploy stages:
			Build
			Test
			Deploy
		started by a trigger activated when conditions are met
			push = git push
			pull = git pull
	pipeline
		stage A
			Job 1
				Step 1.1
				Step 1.2
			Job 2
				Step 2.1
				Step 2.2
		stage B
			...


	Stages = major divisions
		has a collection of jobs
		
		Job = unit of work
			add reference to a container
			has a collection of steps
			
			Steps = tasks (smallest unit of work)
				each step runs in it's own process
	
	If you have more than one Stage, they can be nested within a "Stages" section
	Jobs are the same way.

	Variables: can be specified at the pipeline, stage, or job level.
	Template: can import reusable sections of your pipeline from separate file.
		Stage
		Job
		Step
		Variable
		
		

///////////////////////////////////////////////////////////////////////////////////////////

7) OWASP Foundation
Open Web Application Security Project
use educational and training conferences, and information, to be the 
primary source for developers and technologists to secure the web

Risk Rating Methodology:

Standard Risk Model:
Risk = likelihood * impact
1)	identify a risks
2)	estimate the likelihood
	threat agent:
		skill level, motive, opportunity, size
	vulnerability factors:
		ease of discovery, exploit, awareness, intrusion detection
3) estimate the impact
	technical: confidentiality, integrity, availability, accountability
	busines: financial, reputation, non-compliance, privacy
4) determine severity
	give all factors in likelihood and estimate a rating from 0 to 9.
	then average them for likelihood, and separate average for estimate
	0 to <3 = low
	3 to <6 = medium
	6 to <9 = high
	
	then combine them on a final table:
	Overall Risk Severity
5) decide what to fix
	most severe should be fixed first
	however, it is also based on financial.
		cost of fixing an issue, may not be worth it financially
6) customize the risk rating model


Top Web Security Risks:
Injection: SQL, OS, LDAP, NoSQL
		execute commands
Broken authentication:
		compromised passwords, etc.,
Sensitive data exposure:
		weakly protected data.


///////////////////////////////////////////////////////////////////////////////////////////


8) Cloud Computing:
	delivery of computing services over the internet
	offers faster innovation, flexible resources, and scalability
	
Scaling Types:
	cloud	- allocate resource and pay for them as you need them
	vertical - moving to a larger/smaller instance or upgrading/downgrading resources
	horizontal - adding/removing instances to a service, sytem, application
	
Terms:
	SLA:	service level agreement
			commitment between SP and client about the quality and availability of service and responsibilities of each
	Regions:	independent geographic areas that consist of zones
				locations within zones may have minimum network latencies
	Accessibility zone:	deployment area for cloud resources within a region
						zones are considered a single failure domain within a region
						for higher availability, deploy across multiple zones in a region
						
Types:
	Public		owned by 3rd party
				Azure, AWS, GCP
				all hardware/software is owned by the provider
				clients access services through web browser
				
	Private		single organization
				physically located at on-site locations
				can be contracted to 3rd party to host cloud off-site
				services/infrastructure are maintained on a private network
	
	Hybrid		public, private, on-site clouds combined
				bound together by technology (data/apps are shared between them)
				could also be "multicloud" - org uses more than one public cloud in addition to their on-premises datacenter
								
Models:
	SAAS		deliver software apps over the internet
				typically on a subscription basis
				cloud providers host and manage the app, underlying infrastructure, and maintenance
				office365
				smartsheet

	Serverless	cloud provider handles the setup, capacity, server management for you
				you build the app functionality without spending time managing servers
				you bring your own containers to the fully managed clusters that can scale
				docker hub / kubernetes
			
	PAAS		cloud provider handles the infrastructure of servers, storage, network, etc.
				cloud provider provides tools to enable the software to be accessible over the web.
				apps are run in virtual containers
				you host and maintain the app
				Heroku/SalesForce
				SAP

	IAAS		you rent IT infrastructure - servers, VMs, storage, networks, OS
				pay as you go
				AWS, Azure, GCP
				

///////////////////////////////////////////////////////////////////////////////////////////

Git commands:
Git clone https://nameofrepo	
	download existing source code from remote repo

Git branch	
	allows devs to work in parallel on same project simultaneously
	use command to create, list, and delete branches
	
	git branch <branch name>
		creates branch locally
		
	git push -u <remote repo> <branch-name>
		push the new branch into the remote repo
		
	git branch or git branch --list
	
	git branch -d <branch name>
	
	
Git checkout
	to work in a branch, you need to switch to it
	
	git checkout <branch>
	
	1) the changes in current branch must be committed first
	2) the branch you want to check out should exist in your locally
	
	git checkout -b <branch>
		this will create a new branch in your local, and check it out
		
Git Status
	current branch is up to date
	anything to commit, push, pull
	files staged, unstaged, untracked 
		staged = changes are in Git and marked for commit
		unstaged =  are in Git, but not marked for commit
		untracked = (changes are not in git at all)
	files created, modified, deleted

Git add
	add modified files to the next commit
	unstaged will not be included in the next commit
	
	git add <file>
	git add -A
	
Git commit
	this will save changes only locally
	
	git commit -m "commit message"
	
Git push
	after committing your changes, send them to remote server
	
	if you are on a new branch:
	git push --set-upstream <remote> <name>
	or
	git push -u origin <branch name>
	
	if you are already setup:
	git push <remote> <branch-name>
	

Git pull
	get updates from remote repo
	this command combines git fetch and git merge
	
	it gets updates from remote repo (git fetch)
	and immediately applies the changes in your local (git merge)
	
	git pull <remote>
	
Git revert
	undo changes that have been made
	
	to see commit history:
	git log--oneline
	
	this will give outpu with a hashcode next to each commit
	use hashcode to identify the commit you want to undo:
	
	git revert 3321844
	
	a file will show up with output
	
	press shift+q to exit the file
	
	it will undo the given commit, but will create a new commit without deleting the old one
	
	it basically doesn't touch the commit hisotry
	
	everything happens in local system, unless we push them to remote repo
	

Git merge
	now you merge branch with the parent dev/master branch
	
	you need to be on the dev branch first
	full steps:
	
	git checkout dev
	
	update the dev branch first just in case:
	git fetch
	
	now merge:
	git merge <branch name>
	
	
Git reset
	unstage a file
	git reset --<filename>
	
//////////////////////////////////////////////////////////////////////////////////////////

NuGet

Microsoft-supported mechanism for sharing code (for .Net and .Net Core)
defines how packages for .Net are created, hosted, and consumed
single zip file .nupkg extension that contains compiled code (DLLs, other files, etc).

developer creates package, publish them to public/private host.
consumer obtains the package and calls the functionality in their code.
NuGet itself handles all of the intermediate details.

NuGet supports private hosts, and the public nuget.org host.

create -> package -> publish on nuget.org -> consumer browses/installs

package manager console:
install-package <package name> -p <project name>

dotnet cli:
dotnet add package Newtonsoft.json





	















